import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AccessibilityConfig } from '../../model/accessibility.interface';
import { Image } from '../../model/image.class';
import { Size } from '../../model/size.interface';
import { PlainGalleryConfig } from '../../model/plain-gallery-config.interface';
/**
 * Component with the gallery of thumbs.
 * In receives an array of Images, a boolean to show/hide
 * the gallery (feature used by imagePointer) and a config
 * object to customize the behaviour of this component.
 * Also, it emits click events as outputs.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PlainGalleryComponent implements OnInit, OnChanges {
    /**
     * Array of `Image` that represent the model of this library with all images, thumbs and so on.
     */
    images: Image[];
    /**
     * Boolean to show/hide plain gallery. If true the plain gallery will be visible, false otherwise.
     */
    showGallery: boolean;
    /**
     * Object of type `PlainGalleryConfig` to configure the plain gallery.
     */
    plainGalleryConfig: PlainGalleryConfig;
    /**
     * Object of type `AccessibilityConfig` to init custom accessibility features.
     * For instance, it contains titles, alt texts, aria-labels and so on.
     */
    accessibilityConfig: AccessibilityConfig;
    /**
     * Output to emit an event when an image is changed.
     */
    show: EventEmitter<number>;
    /**
     * Object of type `PlainGalleryConfig` to configure this component.
     */
    configPlainGallery: PlainGalleryConfig;
    /**
     * Bi-dimensional array of `Image` object to store images to display as plain gallery.
     * [] by default.
     */
    imageGrid: Image[][];
    /**
     * Size object used in the template to resize images.
     */
    size: Size;
    /**
     * Boolean passed as input to `ks-wrap` directive to configure flex-wrap css property.
     * However it's not enough, because you need to limit the width using `widthStyle` public variable.
     * For more info check https://developer.mozilla.org/it/docs/Web/CSS/flex-wrap
     */
    wrapStyle: boolean;
    /**
     * String passed as input to `ks-wrap` directive to set width to be able to force overflow.
     * In this way, `wrapStyle` (flex-wrap css property) will be used as requested.
     */
    widthStyle: string;
    /**
     * String passed as input to `ks-direction` directive to set the flex-direction css property.
     * For more info check https://developer.mozilla.org/it/docs/Web/CSS/flex-direction
     */
    directionStyle: string;
    /**
     * String passed as input to `ks-direction` directive to set the justify-content css property.
     * For more info check https://developer.mozilla.org/it/docs/Web/CSS/justify-content
     */
    justifyStyle: string;
    /**
     * Default image size object
     */
    private defaultSize;
    /**
     * Default layout config object
     * Note that length=-1 means infinity
     */
    private defaultLayout;
    /**
     * Default plain gallery config object
     */
    private defaultPlainConfig;
    /**
     * Method ´ngOnChanges´ to update both `imageGrid` and`configPlainGallery`.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called when any data-bound property of a directive changes!!!
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Method ´ngOnInit´ to init both `configPlainGallery` calling `initPlainGalleryConfig()`
     * and `imageGrid invoking `initImageGrid()`.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit(): void;
    /**
     * Method called when you click on an image of the plain (or inline) gallery.
     * This will emit the show event with the index number as payload.
     * @param number index of the clicked image
     */
    showModalGallery(index: number): void;
    /**
     * Method called when you click on an image of the plain (or inline) gallery.
     * This will emit the show event with the image as payload.
     * @param Image img is the Image to show
     */
    showModalGalleryByImage(img: Image): void;
    /**
     * Method to get `alt attribute`.
     * `alt` specifies an alternate text for an image, if the image cannot be displayed.
     * @param Image image to get its alt description.
     * @returns string alt description of the image
     */
    getAltPlainDescriptionByImage(image: Image): string;
    /**
     * Method to get the title for an image.
     * @param Image image to get its title
     * @returns string the title of the input image
     */
    getTitleDisplay(image: Image): string;
    /**
     * Method used in the template to track ids in ngFor.
     * @param number index of the array
     * @param Image item of the array
     * @returns number the id of the item
     */
    trackById(index: number, item: Image): number;
    /**
     * Private method to build and return a `PlainGalleryConfig` object, proving also default values.
     * @returns PlainGalleryConfig the plain gallery configuration
     * @throws an Error if layout and strategy aren't compatible
     */
    private initPlainGalleryConfig;
    /**
     * Private method to init both `imageGrid` and other style variables,
     * based on the layout type.
     */
    private initImageGrid;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PlainGalleryComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PlainGalleryComponent, "ks-plain-gallery", never, { "images": "images"; "showGallery": "showGallery"; "plainGalleryConfig": "plainGalleryConfig"; "accessibilityConfig": "accessibilityConfig"; }, { "show": "show"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhaW4tZ2FsbGVyeS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGxhaW4tZ2FsbGVyeS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkhBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWNjZXNzaWJpbGl0eUNvbmZpZyB9IGZyb20gJy4uLy4uL21vZGVsL2FjY2Vzc2liaWxpdHkuaW50ZXJmYWNlJztcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaW1hZ2UuY2xhc3MnO1xuaW1wb3J0IHsgU2l6ZSB9IGZyb20gJy4uLy4uL21vZGVsL3NpemUuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBsYWluR2FsbGVyeUNvbmZpZyB9IGZyb20gJy4uLy4uL21vZGVsL3BsYWluLWdhbGxlcnktY29uZmlnLmludGVyZmFjZSc7XG4vKipcbiAqIENvbXBvbmVudCB3aXRoIHRoZSBnYWxsZXJ5IG9mIHRodW1icy5cbiAqIEluIHJlY2VpdmVzIGFuIGFycmF5IG9mIEltYWdlcywgYSBib29sZWFuIHRvIHNob3cvaGlkZVxuICogdGhlIGdhbGxlcnkgKGZlYXR1cmUgdXNlZCBieSBpbWFnZVBvaW50ZXIpIGFuZCBhIGNvbmZpZ1xuICogb2JqZWN0IHRvIGN1c3RvbWl6ZSB0aGUgYmVoYXZpb3VyIG9mIHRoaXMgY29tcG9uZW50LlxuICogQWxzbywgaXQgZW1pdHMgY2xpY2sgZXZlbnRzIGFzIG91dHB1dHMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBsYWluR2FsbGVyeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBgSW1hZ2VgIHRoYXQgcmVwcmVzZW50IHRoZSBtb2RlbCBvZiB0aGlzIGxpYnJhcnkgd2l0aCBhbGwgaW1hZ2VzLCB0aHVtYnMgYW5kIHNvIG9uLlxuICAgICAqL1xuICAgIGltYWdlczogSW1hZ2VbXTtcbiAgICAvKipcbiAgICAgKiBCb29sZWFuIHRvIHNob3cvaGlkZSBwbGFpbiBnYWxsZXJ5LiBJZiB0cnVlIHRoZSBwbGFpbiBnYWxsZXJ5IHdpbGwgYmUgdmlzaWJsZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIHNob3dHYWxsZXJ5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9iamVjdCBvZiB0eXBlIGBQbGFpbkdhbGxlcnlDb25maWdgIHRvIGNvbmZpZ3VyZSB0aGUgcGxhaW4gZ2FsbGVyeS5cbiAgICAgKi9cbiAgICBwbGFpbkdhbGxlcnlDb25maWc6IFBsYWluR2FsbGVyeUNvbmZpZztcbiAgICAvKipcbiAgICAgKiBPYmplY3Qgb2YgdHlwZSBgQWNjZXNzaWJpbGl0eUNvbmZpZ2AgdG8gaW5pdCBjdXN0b20gYWNjZXNzaWJpbGl0eSBmZWF0dXJlcy5cbiAgICAgKiBGb3IgaW5zdGFuY2UsIGl0IGNvbnRhaW5zIHRpdGxlcywgYWx0IHRleHRzLCBhcmlhLWxhYmVscyBhbmQgc28gb24uXG4gICAgICovXG4gICAgYWNjZXNzaWJpbGl0eUNvbmZpZzogQWNjZXNzaWJpbGl0eUNvbmZpZztcbiAgICAvKipcbiAgICAgKiBPdXRwdXQgdG8gZW1pdCBhbiBldmVudCB3aGVuIGFuIGltYWdlIGlzIGNoYW5nZWQuXG4gICAgICovXG4gICAgc2hvdzogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqXG4gICAgICogT2JqZWN0IG9mIHR5cGUgYFBsYWluR2FsbGVyeUNvbmZpZ2AgdG8gY29uZmlndXJlIHRoaXMgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGNvbmZpZ1BsYWluR2FsbGVyeTogUGxhaW5HYWxsZXJ5Q29uZmlnO1xuICAgIC8qKlxuICAgICAqIEJpLWRpbWVuc2lvbmFsIGFycmF5IG9mIGBJbWFnZWAgb2JqZWN0IHRvIHN0b3JlIGltYWdlcyB0byBkaXNwbGF5IGFzIHBsYWluIGdhbGxlcnkuXG4gICAgICogW10gYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBpbWFnZUdyaWQ6IEltYWdlW11bXTtcbiAgICAvKipcbiAgICAgKiBTaXplIG9iamVjdCB1c2VkIGluIHRoZSB0ZW1wbGF0ZSB0byByZXNpemUgaW1hZ2VzLlxuICAgICAqL1xuICAgIHNpemU6IFNpemU7XG4gICAgLyoqXG4gICAgICogQm9vbGVhbiBwYXNzZWQgYXMgaW5wdXQgdG8gYGtzLXdyYXBgIGRpcmVjdGl2ZSB0byBjb25maWd1cmUgZmxleC13cmFwIGNzcyBwcm9wZXJ0eS5cbiAgICAgKiBIb3dldmVyIGl0J3Mgbm90IGVub3VnaCwgYmVjYXVzZSB5b3UgbmVlZCB0byBsaW1pdCB0aGUgd2lkdGggdXNpbmcgYHdpZHRoU3R5bGVgIHB1YmxpYyB2YXJpYWJsZS5cbiAgICAgKiBGb3IgbW9yZSBpbmZvIGNoZWNrIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2l0L2RvY3MvV2ViL0NTUy9mbGV4LXdyYXBcbiAgICAgKi9cbiAgICB3cmFwU3R5bGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3RyaW5nIHBhc3NlZCBhcyBpbnB1dCB0byBga3Mtd3JhcGAgZGlyZWN0aXZlIHRvIHNldCB3aWR0aCB0byBiZSBhYmxlIHRvIGZvcmNlIG92ZXJmbG93LlxuICAgICAqIEluIHRoaXMgd2F5LCBgd3JhcFN0eWxlYCAoZmxleC13cmFwIGNzcyBwcm9wZXJ0eSkgd2lsbCBiZSB1c2VkIGFzIHJlcXVlc3RlZC5cbiAgICAgKi9cbiAgICB3aWR0aFN0eWxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3RyaW5nIHBhc3NlZCBhcyBpbnB1dCB0byBga3MtZGlyZWN0aW9uYCBkaXJlY3RpdmUgdG8gc2V0IHRoZSBmbGV4LWRpcmVjdGlvbiBjc3MgcHJvcGVydHkuXG4gICAgICogRm9yIG1vcmUgaW5mbyBjaGVjayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9pdC9kb2NzL1dlYi9DU1MvZmxleC1kaXJlY3Rpb25cbiAgICAgKi9cbiAgICBkaXJlY3Rpb25TdHlsZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFN0cmluZyBwYXNzZWQgYXMgaW5wdXQgdG8gYGtzLWRpcmVjdGlvbmAgZGlyZWN0aXZlIHRvIHNldCB0aGUganVzdGlmeS1jb250ZW50IGNzcyBwcm9wZXJ0eS5cbiAgICAgKiBGb3IgbW9yZSBpbmZvIGNoZWNrIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2l0L2RvY3MvV2ViL0NTUy9qdXN0aWZ5LWNvbnRlbnRcbiAgICAgKi9cbiAgICBqdXN0aWZ5U3R5bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGltYWdlIHNpemUgb2JqZWN0XG4gICAgICovXG4gICAgcHJpdmF0ZSBkZWZhdWx0U2l6ZTtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGxheW91dCBjb25maWcgb2JqZWN0XG4gICAgICogTm90ZSB0aGF0IGxlbmd0aD0tMSBtZWFucyBpbmZpbml0eVxuICAgICAqL1xuICAgIHByaXZhdGUgZGVmYXVsdExheW91dDtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHBsYWluIGdhbGxlcnkgY29uZmlnIG9iamVjdFxuICAgICAqL1xuICAgIHByaXZhdGUgZGVmYXVsdFBsYWluQ29uZmlnO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCDCtG5nT25DaGFuZ2VzwrQgdG8gdXBkYXRlIGJvdGggYGltYWdlR3JpZGAgYW5kYGNvbmZpZ1BsYWluR2FsbGVyeWAuXG4gICAgICogVGhpcyBpcyBhbiBBbmd1bGFyJ3MgbGlmZWN5Y2xlIGhvb2ssIHNvIGl0cyBjYWxsZWQgYXV0b21hdGljYWxseSBieSBBbmd1bGFyIGl0c2VsZi5cbiAgICAgKiBJbiBwYXJ0aWN1bGFyLCBpdCdzIGNhbGxlZCB3aGVuIGFueSBkYXRhLWJvdW5kIHByb3BlcnR5IG9mIGEgZGlyZWN0aXZlIGNoYW5nZXMhISFcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgwrRuZ09uSW5pdMK0IHRvIGluaXQgYm90aCBgY29uZmlnUGxhaW5HYWxsZXJ5YCBjYWxsaW5nIGBpbml0UGxhaW5HYWxsZXJ5Q29uZmlnKClgXG4gICAgICogYW5kIGBpbWFnZUdyaWQgaW52b2tpbmcgYGluaXRJbWFnZUdyaWQoKWAuXG4gICAgICogVGhpcyBpcyBhbiBBbmd1bGFyJ3MgbGlmZWN5Y2xlIGhvb2ssIHNvIGl0cyBjYWxsZWQgYXV0b21hdGljYWxseSBieSBBbmd1bGFyIGl0c2VsZi5cbiAgICAgKiBJbiBwYXJ0aWN1bGFyLCBpdCdzIGNhbGxlZCBvbmx5IG9uZSB0aW1lISEhXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgY2FsbGVkIHdoZW4geW91IGNsaWNrIG9uIGFuIGltYWdlIG9mIHRoZSBwbGFpbiAob3IgaW5saW5lKSBnYWxsZXJ5LlxuICAgICAqIFRoaXMgd2lsbCBlbWl0IHRoZSBzaG93IGV2ZW50IHdpdGggdGhlIGluZGV4IG51bWJlciBhcyBwYXlsb2FkLlxuICAgICAqIEBwYXJhbSBudW1iZXIgaW5kZXggb2YgdGhlIGNsaWNrZWQgaW1hZ2VcbiAgICAgKi9cbiAgICBzaG93TW9kYWxHYWxsZXJ5KGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBjYWxsZWQgd2hlbiB5b3UgY2xpY2sgb24gYW4gaW1hZ2Ugb2YgdGhlIHBsYWluIChvciBpbmxpbmUpIGdhbGxlcnkuXG4gICAgICogVGhpcyB3aWxsIGVtaXQgdGhlIHNob3cgZXZlbnQgd2l0aCB0aGUgaW1hZ2UgYXMgcGF5bG9hZC5cbiAgICAgKiBAcGFyYW0gSW1hZ2UgaW1nIGlzIHRoZSBJbWFnZSB0byBzaG93XG4gICAgICovXG4gICAgc2hvd01vZGFsR2FsbGVyeUJ5SW1hZ2UoaW1nOiBJbWFnZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGdldCBgYWx0IGF0dHJpYnV0ZWAuXG4gICAgICogYGFsdGAgc3BlY2lmaWVzIGFuIGFsdGVybmF0ZSB0ZXh0IGZvciBhbiBpbWFnZSwgaWYgdGhlIGltYWdlIGNhbm5vdCBiZSBkaXNwbGF5ZWQuXG4gICAgICogQHBhcmFtIEltYWdlIGltYWdlIHRvIGdldCBpdHMgYWx0IGRlc2NyaXB0aW9uLlxuICAgICAqIEByZXR1cm5zIHN0cmluZyBhbHQgZGVzY3JpcHRpb24gb2YgdGhlIGltYWdlXG4gICAgICovXG4gICAgZ2V0QWx0UGxhaW5EZXNjcmlwdGlvbkJ5SW1hZ2UoaW1hZ2U6IEltYWdlKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBnZXQgdGhlIHRpdGxlIGZvciBhbiBpbWFnZS5cbiAgICAgKiBAcGFyYW0gSW1hZ2UgaW1hZ2UgdG8gZ2V0IGl0cyB0aXRsZVxuICAgICAqIEByZXR1cm5zIHN0cmluZyB0aGUgdGl0bGUgb2YgdGhlIGlucHV0IGltYWdlXG4gICAgICovXG4gICAgZ2V0VGl0bGVEaXNwbGF5KGltYWdlOiBJbWFnZSk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdXNlZCBpbiB0aGUgdGVtcGxhdGUgdG8gdHJhY2sgaWRzIGluIG5nRm9yLlxuICAgICAqIEBwYXJhbSBudW1iZXIgaW5kZXggb2YgdGhlIGFycmF5XG4gICAgICogQHBhcmFtIEltYWdlIGl0ZW0gb2YgdGhlIGFycmF5XG4gICAgICogQHJldHVybnMgbnVtYmVyIHRoZSBpZCBvZiB0aGUgaXRlbVxuICAgICAqL1xuICAgIHRyYWNrQnlJZChpbmRleDogbnVtYmVyLCBpdGVtOiBJbWFnZSk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCB0byBidWlsZCBhbmQgcmV0dXJuIGEgYFBsYWluR2FsbGVyeUNvbmZpZ2Agb2JqZWN0LCBwcm92aW5nIGFsc28gZGVmYXVsdCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgUGxhaW5HYWxsZXJ5Q29uZmlnIHRoZSBwbGFpbiBnYWxsZXJ5IGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAdGhyb3dzIGFuIEVycm9yIGlmIGxheW91dCBhbmQgc3RyYXRlZ3kgYXJlbid0IGNvbXBhdGlibGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRQbGFpbkdhbGxlcnlDb25maWc7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBtZXRob2QgdG8gaW5pdCBib3RoIGBpbWFnZUdyaWRgIGFuZCBvdGhlciBzdHlsZSB2YXJpYWJsZXMsXG4gICAgICogYmFzZWQgb24gdGhlIGxheW91dCB0eXBlLlxuICAgICAqL1xuICAgIHByaXZhdGUgaW5pdEltYWdlR3JpZDtcbn1cbiJdfQ==