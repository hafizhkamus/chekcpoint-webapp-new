import { EventEmitter, OnInit } from '@angular/core';
import { AccessibleComponent } from '../accessible.component';
import { Action } from '../../model/action.enum';
import { Image } from '../../model/image.class';
import { ButtonConfig, ButtonEvent, ButtonsConfig } from '../../model/buttons-config.interface';
/**
 * Internal representation of `ButtonConfig` with an optional `id` field, used by trackId to improve performances.
 */
import * as ɵngcc0 from '@angular/core';
export interface InternalButtonConfig extends ButtonConfig {
    id?: number;
}
/**
 * Component with all upper buttons.
 * Also it emits click events as outputs.
 */
export declare class UpperButtonsComponent extends AccessibleComponent implements OnInit {
    /**
     * Object of type `Image` that represent the visible image.
     */
    currentImage: Image;
    /**
     * Object of type `ButtonsConfig` to init UpperButtonsComponent's features.
     * For instance, it contains an array of buttons.
     */
    buttonsConfig: ButtonsConfig;
    /**
     * Output to emit clicks on refresh button. The payload contains a `ButtonEvent`.
     */
    refresh: EventEmitter<ButtonEvent>;
    /**
     * Output to emit clicks on delete button. The payload contains a `ButtonEvent`.
     */
    delete: EventEmitter<ButtonEvent>;
    /**
     * Output to emit clicks on navigate button. The payload contains a `ButtonEvent`.
     */
    navigate: EventEmitter<ButtonEvent>;
    /**
     * Output to emit clicks on download button. The payload contains a `ButtonEvent`.
     */
    download: EventEmitter<ButtonEvent>;
    /**
     * Output to emit clicks on close button. The payload contains a `ButtonEvent`.
     */
    close: EventEmitter<ButtonEvent>;
    /**
     * Output to emit clicks on full-screen button. The payload contains a `ButtonEvent`.
     */
    fullscreen: EventEmitter<ButtonEvent>;
    /**
     * Output to emit clicks on all custom buttons. The payload contains a `ButtonEvent`.
     */
    customEmit: EventEmitter<ButtonEvent>;
    /**
     * Array of `InternalButtonConfig` exposed to the template. This field is initialized
     * applying transformations, default values and so on to the input of the same type.
     */
    buttons: InternalButtonConfig[];
    /**
     * Object of type `ButtonsConfig` exposed to the template. This field is initialized
     * applying transformations, default values and so on to the input of the same type.
     */
    configButtons: ButtonsConfig;
    /**
     * Default buttons array for standard configuration
     */
    private defaultButtonsDefault;
    /**
     * Default buttons array for simple configuration
     */
    private simpleButtonsDefault;
    /**
     * Default buttons array for advanced configuration
     */
    private advancedButtonsDefault;
    /**
     * Default buttons array for full configuration
     */
    private fullButtonsDefault;
    /**
     * Method ´ngOnInit´ to build `configButtons` applying a default value and also to
     * init the `buttons` array.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit(): void;
    /**
     * Method called by events from both keyboard and mouse on a button.
     * This will call a private method to trigger an output with the right payload.
     * @param InternalButtonConfig button that called this method
     * @param KeyboardEvent | MouseEvent event payload
     * @param Action action that triggered the source event or `Action.CLICK` if not specified
     * @throws an error if the button type is unknown
     */
    onEvent(button: InternalButtonConfig, event: KeyboardEvent | MouseEvent, action?: Action): void;
    /**
     * Method used in the template to track ids in ngFor.
     * @param number index of the array
     * @param Image item of the array
     * @returns number the id of the item or undefined if the item is not valid
     */
    trackById(index: number, item: InternalButtonConfig): number | undefined;
    /**
     * Private method to emit an event using the specified output as an `EventEmitter`.
     * @param EventEmitter<ButtonEvent> emitter is the output to emit the `ButtonEvent`
     * @param KeyboardEvent | MouseEvent event is the source that triggered this method
     * @param ButtonEvent dataToEmit payload to emit
     */
    private triggerOnMouseAndKeyboard;
    /**
     * Private method to add ids to the array of buttons.
     * It adds ids in a reverse way, to be sure that the last button will always have id = 0.
     * This is really useful in unit testing to be sure that close button always have id = 0, download 1 and so on...
     * It's totally transparent to the user.
     * @param ButtonConfig[] buttons config array
     * @returns ButtonConfig[] the input array with incremental numeric ids
     */
    private addButtonIds;
    /**
     * Private method to validate custom buttons received as input.
     * @param ButtonConfig[] buttons config array
     * @returns ButtonConfig[] the same input buttons config array
     * @throws an error is exists a button with an unknown type
     */
    private validateCustomButtons;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UpperButtonsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<UpperButtonsComponent, "ks-upper-buttons", never, { "currentImage": "currentImage"; "buttonsConfig": "buttonsConfig"; }, { "refresh": "refresh"; "delete": "delete"; "navigate": "navigate"; "download": "download"; "close": "close"; "fullscreen": "fullscreen"; "customEmit": "customEmit"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBwZXItYnV0dG9ucy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidXBwZXItYnV0dG9ucy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUhBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjY2Vzc2libGVDb21wb25lbnQgfSBmcm9tICcuLi9hY2Nlc3NpYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuLi8uLi9tb2RlbC9hY3Rpb24uZW51bSc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uL21vZGVsL2ltYWdlLmNsYXNzJztcbmltcG9ydCB7IEJ1dHRvbkNvbmZpZywgQnV0dG9uRXZlbnQsIEJ1dHRvbnNDb25maWcgfSBmcm9tICcuLi8uLi9tb2RlbC9idXR0b25zLWNvbmZpZy5pbnRlcmZhY2UnO1xuLyoqXG4gKiBJbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBgQnV0dG9uQ29uZmlnYCB3aXRoIGFuIG9wdGlvbmFsIGBpZGAgZmllbGQsIHVzZWQgYnkgdHJhY2tJZCB0byBpbXByb3ZlIHBlcmZvcm1hbmNlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbnRlcm5hbEJ1dHRvbkNvbmZpZyBleHRlbmRzIEJ1dHRvbkNvbmZpZyB7XG4gICAgaWQ/OiBudW1iZXI7XG59XG4vKipcbiAqIENvbXBvbmVudCB3aXRoIGFsbCB1cHBlciBidXR0b25zLlxuICogQWxzbyBpdCBlbWl0cyBjbGljayBldmVudHMgYXMgb3V0cHV0cy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVXBwZXJCdXR0b25zQ29tcG9uZW50IGV4dGVuZHMgQWNjZXNzaWJsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgLyoqXG4gICAgICogT2JqZWN0IG9mIHR5cGUgYEltYWdlYCB0aGF0IHJlcHJlc2VudCB0aGUgdmlzaWJsZSBpbWFnZS5cbiAgICAgKi9cbiAgICBjdXJyZW50SW1hZ2U6IEltYWdlO1xuICAgIC8qKlxuICAgICAqIE9iamVjdCBvZiB0eXBlIGBCdXR0b25zQ29uZmlnYCB0byBpbml0IFVwcGVyQnV0dG9uc0NvbXBvbmVudCdzIGZlYXR1cmVzLlxuICAgICAqIEZvciBpbnN0YW5jZSwgaXQgY29udGFpbnMgYW4gYXJyYXkgb2YgYnV0dG9ucy5cbiAgICAgKi9cbiAgICBidXR0b25zQ29uZmlnOiBCdXR0b25zQ29uZmlnO1xuICAgIC8qKlxuICAgICAqIE91dHB1dCB0byBlbWl0IGNsaWNrcyBvbiByZWZyZXNoIGJ1dHRvbi4gVGhlIHBheWxvYWQgY29udGFpbnMgYSBgQnV0dG9uRXZlbnRgLlxuICAgICAqL1xuICAgIHJlZnJlc2g6IEV2ZW50RW1pdHRlcjxCdXR0b25FdmVudD47XG4gICAgLyoqXG4gICAgICogT3V0cHV0IHRvIGVtaXQgY2xpY2tzIG9uIGRlbGV0ZSBidXR0b24uIFRoZSBwYXlsb2FkIGNvbnRhaW5zIGEgYEJ1dHRvbkV2ZW50YC5cbiAgICAgKi9cbiAgICBkZWxldGU6IEV2ZW50RW1pdHRlcjxCdXR0b25FdmVudD47XG4gICAgLyoqXG4gICAgICogT3V0cHV0IHRvIGVtaXQgY2xpY2tzIG9uIG5hdmlnYXRlIGJ1dHRvbi4gVGhlIHBheWxvYWQgY29udGFpbnMgYSBgQnV0dG9uRXZlbnRgLlxuICAgICAqL1xuICAgIG5hdmlnYXRlOiBFdmVudEVtaXR0ZXI8QnV0dG9uRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIE91dHB1dCB0byBlbWl0IGNsaWNrcyBvbiBkb3dubG9hZCBidXR0b24uIFRoZSBwYXlsb2FkIGNvbnRhaW5zIGEgYEJ1dHRvbkV2ZW50YC5cbiAgICAgKi9cbiAgICBkb3dubG9hZDogRXZlbnRFbWl0dGVyPEJ1dHRvbkV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBPdXRwdXQgdG8gZW1pdCBjbGlja3Mgb24gY2xvc2UgYnV0dG9uLiBUaGUgcGF5bG9hZCBjb250YWlucyBhIGBCdXR0b25FdmVudGAuXG4gICAgICovXG4gICAgY2xvc2U6IEV2ZW50RW1pdHRlcjxCdXR0b25FdmVudD47XG4gICAgLyoqXG4gICAgICogT3V0cHV0IHRvIGVtaXQgY2xpY2tzIG9uIGZ1bGwtc2NyZWVuIGJ1dHRvbi4gVGhlIHBheWxvYWQgY29udGFpbnMgYSBgQnV0dG9uRXZlbnRgLlxuICAgICAqL1xuICAgIGZ1bGxzY3JlZW46IEV2ZW50RW1pdHRlcjxCdXR0b25FdmVudD47XG4gICAgLyoqXG4gICAgICogT3V0cHV0IHRvIGVtaXQgY2xpY2tzIG9uIGFsbCBjdXN0b20gYnV0dG9ucy4gVGhlIHBheWxvYWQgY29udGFpbnMgYSBgQnV0dG9uRXZlbnRgLlxuICAgICAqL1xuICAgIGN1c3RvbUVtaXQ6IEV2ZW50RW1pdHRlcjxCdXR0b25FdmVudD47XG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgYEludGVybmFsQnV0dG9uQ29uZmlnYCBleHBvc2VkIHRvIHRoZSB0ZW1wbGF0ZS4gVGhpcyBmaWVsZCBpcyBpbml0aWFsaXplZFxuICAgICAqIGFwcGx5aW5nIHRyYW5zZm9ybWF0aW9ucywgZGVmYXVsdCB2YWx1ZXMgYW5kIHNvIG9uIHRvIHRoZSBpbnB1dCBvZiB0aGUgc2FtZSB0eXBlLlxuICAgICAqL1xuICAgIGJ1dHRvbnM6IEludGVybmFsQnV0dG9uQ29uZmlnW107XG4gICAgLyoqXG4gICAgICogT2JqZWN0IG9mIHR5cGUgYEJ1dHRvbnNDb25maWdgIGV4cG9zZWQgdG8gdGhlIHRlbXBsYXRlLiBUaGlzIGZpZWxkIGlzIGluaXRpYWxpemVkXG4gICAgICogYXBwbHlpbmcgdHJhbnNmb3JtYXRpb25zLCBkZWZhdWx0IHZhbHVlcyBhbmQgc28gb24gdG8gdGhlIGlucHV0IG9mIHRoZSBzYW1lIHR5cGUuXG4gICAgICovXG4gICAgY29uZmlnQnV0dG9uczogQnV0dG9uc0NvbmZpZztcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGJ1dHRvbnMgYXJyYXkgZm9yIHN0YW5kYXJkIGNvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIGRlZmF1bHRCdXR0b25zRGVmYXVsdDtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGJ1dHRvbnMgYXJyYXkgZm9yIHNpbXBsZSBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgcHJpdmF0ZSBzaW1wbGVCdXR0b25zRGVmYXVsdDtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGJ1dHRvbnMgYXJyYXkgZm9yIGFkdmFuY2VkIGNvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIGFkdmFuY2VkQnV0dG9uc0RlZmF1bHQ7XG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBidXR0b25zIGFycmF5IGZvciBmdWxsIGNvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIGZ1bGxCdXR0b25zRGVmYXVsdDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgwrRuZ09uSW5pdMK0IHRvIGJ1aWxkIGBjb25maWdCdXR0b25zYCBhcHBseWluZyBhIGRlZmF1bHQgdmFsdWUgYW5kIGFsc28gdG9cbiAgICAgKiBpbml0IHRoZSBgYnV0dG9uc2AgYXJyYXkuXG4gICAgICogVGhpcyBpcyBhbiBBbmd1bGFyJ3MgbGlmZWN5Y2xlIGhvb2ssIHNvIGl0cyBjYWxsZWQgYXV0b21hdGljYWxseSBieSBBbmd1bGFyIGl0c2VsZi5cbiAgICAgKiBJbiBwYXJ0aWN1bGFyLCBpdCdzIGNhbGxlZCBvbmx5IG9uZSB0aW1lISEhXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgY2FsbGVkIGJ5IGV2ZW50cyBmcm9tIGJvdGgga2V5Ym9hcmQgYW5kIG1vdXNlIG9uIGEgYnV0dG9uLlxuICAgICAqIFRoaXMgd2lsbCBjYWxsIGEgcHJpdmF0ZSBtZXRob2QgdG8gdHJpZ2dlciBhbiBvdXRwdXQgd2l0aCB0aGUgcmlnaHQgcGF5bG9hZC5cbiAgICAgKiBAcGFyYW0gSW50ZXJuYWxCdXR0b25Db25maWcgYnV0dG9uIHRoYXQgY2FsbGVkIHRoaXMgbWV0aG9kXG4gICAgICogQHBhcmFtIEtleWJvYXJkRXZlbnQgfCBNb3VzZUV2ZW50IGV2ZW50IHBheWxvYWRcbiAgICAgKiBAcGFyYW0gQWN0aW9uIGFjdGlvbiB0aGF0IHRyaWdnZXJlZCB0aGUgc291cmNlIGV2ZW50IG9yIGBBY3Rpb24uQ0xJQ0tgIGlmIG5vdCBzcGVjaWZpZWRcbiAgICAgKiBAdGhyb3dzIGFuIGVycm9yIGlmIHRoZSBidXR0b24gdHlwZSBpcyB1bmtub3duXG4gICAgICovXG4gICAgb25FdmVudChidXR0b246IEludGVybmFsQnV0dG9uQ29uZmlnLCBldmVudDogS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQsIGFjdGlvbj86IEFjdGlvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgaW4gdGhlIHRlbXBsYXRlIHRvIHRyYWNrIGlkcyBpbiBuZ0Zvci5cbiAgICAgKiBAcGFyYW0gbnVtYmVyIGluZGV4IG9mIHRoZSBhcnJheVxuICAgICAqIEBwYXJhbSBJbWFnZSBpdGVtIG9mIHRoZSBhcnJheVxuICAgICAqIEByZXR1cm5zIG51bWJlciB0aGUgaWQgb2YgdGhlIGl0ZW0gb3IgdW5kZWZpbmVkIGlmIHRoZSBpdGVtIGlzIG5vdCB2YWxpZFxuICAgICAqL1xuICAgIHRyYWNrQnlJZChpbmRleDogbnVtYmVyLCBpdGVtOiBJbnRlcm5hbEJ1dHRvbkNvbmZpZyk6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCB0byBlbWl0IGFuIGV2ZW50IHVzaW5nIHRoZSBzcGVjaWZpZWQgb3V0cHV0IGFzIGFuIGBFdmVudEVtaXR0ZXJgLlxuICAgICAqIEBwYXJhbSBFdmVudEVtaXR0ZXI8QnV0dG9uRXZlbnQ+IGVtaXR0ZXIgaXMgdGhlIG91dHB1dCB0byBlbWl0IHRoZSBgQnV0dG9uRXZlbnRgXG4gICAgICogQHBhcmFtIEtleWJvYXJkRXZlbnQgfCBNb3VzZUV2ZW50IGV2ZW50IGlzIHRoZSBzb3VyY2UgdGhhdCB0cmlnZ2VyZWQgdGhpcyBtZXRob2RcbiAgICAgKiBAcGFyYW0gQnV0dG9uRXZlbnQgZGF0YVRvRW1pdCBwYXlsb2FkIHRvIGVtaXRcbiAgICAgKi9cbiAgICBwcml2YXRlIHRyaWdnZXJPbk1vdXNlQW5kS2V5Ym9hcmQ7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBtZXRob2QgdG8gYWRkIGlkcyB0byB0aGUgYXJyYXkgb2YgYnV0dG9ucy5cbiAgICAgKiBJdCBhZGRzIGlkcyBpbiBhIHJldmVyc2Ugd2F5LCB0byBiZSBzdXJlIHRoYXQgdGhlIGxhc3QgYnV0dG9uIHdpbGwgYWx3YXlzIGhhdmUgaWQgPSAwLlxuICAgICAqIFRoaXMgaXMgcmVhbGx5IHVzZWZ1bCBpbiB1bml0IHRlc3RpbmcgdG8gYmUgc3VyZSB0aGF0IGNsb3NlIGJ1dHRvbiBhbHdheXMgaGF2ZSBpZCA9IDAsIGRvd25sb2FkIDEgYW5kIHNvIG9uLi4uXG4gICAgICogSXQncyB0b3RhbGx5IHRyYW5zcGFyZW50IHRvIHRoZSB1c2VyLlxuICAgICAqIEBwYXJhbSBCdXR0b25Db25maWdbXSBidXR0b25zIGNvbmZpZyBhcnJheVxuICAgICAqIEByZXR1cm5zIEJ1dHRvbkNvbmZpZ1tdIHRoZSBpbnB1dCBhcnJheSB3aXRoIGluY3JlbWVudGFsIG51bWVyaWMgaWRzXG4gICAgICovXG4gICAgcHJpdmF0ZSBhZGRCdXR0b25JZHM7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBtZXRob2QgdG8gdmFsaWRhdGUgY3VzdG9tIGJ1dHRvbnMgcmVjZWl2ZWQgYXMgaW5wdXQuXG4gICAgICogQHBhcmFtIEJ1dHRvbkNvbmZpZ1tdIGJ1dHRvbnMgY29uZmlnIGFycmF5XG4gICAgICogQHJldHVybnMgQnV0dG9uQ29uZmlnW10gdGhlIHNhbWUgaW5wdXQgYnV0dG9ucyBjb25maWcgYXJyYXlcbiAgICAgKiBAdGhyb3dzIGFuIGVycm9yIGlzIGV4aXN0cyBhIGJ1dHRvbiB3aXRoIGFuIHVua25vd24gdHlwZVxuICAgICAqL1xuICAgIHByaXZhdGUgdmFsaWRhdGVDdXN0b21CdXR0b25zO1xufVxuIl19