import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { BreakpointObserver } from '@angular/cdk/layout';
import { AccessibleComponent } from '../../accessible.component';
import { AccessibilityConfig } from '../../../model/accessibility.interface';
import { Image, ImageEvent } from '../../../model/image.class';
import { InternalLibImage } from '../../../model/image-internal.class';
import { CarouselPreviewConfig } from '../../../model/carousel-preview-config.interface';
import { CarouselConfig } from '../../../model/carousel-config.interface';
import { Action } from '../../../model/action.enum';
/**
 * Component with image previews for carousel
 */
import * as ɵngcc0 from '@angular/core';
export declare class CarouselPreviewsComponent extends AccessibleComponent implements OnInit, OnChanges, OnDestroy {
    private ref;
    private breakpointObserver;
    private sanitizer;
    /**
     * Variable to change the max-width of the host component
     */
    hostMaxWidth: string;
    /**
     * Variable to set aria-label of the host component
     */
    ariaLabel: string;
    /**
     * Object of type `CarouselConfig` to init CarouselComponent's features.
     * For instance, it contains parameters to change the style, how it navigates and so on.
     */
    carouselConfig: CarouselConfig;
    /**
     * Object of type `InternalLibImage` that represent the visible image.
     */
    currentImage: InternalLibImage;
    /**
     * Array of `InternalLibImage` that represent the model of this library with all images,
     * thumbs and so on.
     */
    images: InternalLibImage[];
    /**
     * Object of type `CarouselPreviewConfig` to init PreviewsComponent's features.
     * For instance, it contains a param to show/hide this component, sizes.
     */
    previewConfig: CarouselPreviewConfig;
    /**
     * Object of type `AccessibilityConfig` to init custom accessibility features.
     * For instance, it contains titles, alt texts, aria-labels and so on.
     */
    accessibilityConfig: AccessibilityConfig;
    /**
     * Output to emit the clicked preview. The payload contains the `InternalLibImage` associated to the clicked preview.
     */
    clickPreview: EventEmitter<ImageEvent>;
    /**
     * Enum of type `Action` that represents a mouse click on a button.
     * Declared here to be used inside the template.
     */
    clickAction: Action;
    /**
     * Enum of type `Action` that represents a keyboard action.
     * Declared here to be used inside the template.
     */
    keyboardAction: Action;
    /**
     * Array of `InternalLibImage` exposed to the template. This field is initialized
     * applying transformations, default values and so on to the input of the same type.
     */
    previews: InternalLibImage[];
    /**
     * Object of type `CarouselPreviewConfig` exposed to the template. This field is initialized
     * applying transformations, default values and so on to the input of the same type.
     */
    configPreview: CarouselPreviewConfig;
    /**
     * Start index (inclusive) of the input images used to display previews.
     */
    start: number;
    /**
     * End index (non inclusive) of the input images used to display previews.
     */
    end: number;
    /**
     * Private property with the default max height of previews.
     */
    private defaultMaxHeight;
    private breakpointSubscription;
    constructor(ref: ChangeDetectorRef, breakpointObserver: BreakpointObserver, sanitizer: DomSanitizer);
    /**
     * Method to update the height of previews, passing the desired height as input.
     * @param configBreakpointHeight is a number that represent the desired height to set.
     */
    private updateHeight;
    /**
     * Method ´ngOnInit´ to build `configPreview` applying a default value and also to
     * init the `previews` array.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit(): void;
    /**
     * Method to check if an image is active (i.e. a preview image).
     * @param InternalLibImage preview is an image to check if it's active or not
     * @returns boolean true if is active, false otherwise
     */
    isActive(preview: InternalLibImage): boolean;
    /**
     * Method ´ngOnChanges´ to update `previews` array.
     * Also, both `start` and `end` local variables will be updated accordingly.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called when any data-bound property of a directive changes!!!
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Method called by events from both keyboard and mouse on a preview.
     * This will trigger the `clickpreview` output with the input preview as its payload.
     * @param InternalLibImage preview that triggered this method
     * @param KeyboardEvent | MouseEvent event payload
     * @param Action that triggered this event (Action.NORMAL by default)
     */
    onImageEvent(preview: InternalLibImage, event: KeyboardEvent | MouseEvent, action?: Action): void;
    /**
     * Method called by events from both keyboard and mouse on a navigation arrow.
     * @param string direction of the navigation that can be either 'next' or 'prev'
     * @param KeyboardEvent | MouseEvent event payload
     */
    onNavigationEvent(direction: string, event: KeyboardEvent | MouseEvent): void;
    /**
     * Method to get aria-label text for a preview image.
     * @param Image is the preview
     */
    getAriaLabel(preview: Image): string;
    /**
     * Method to get title text for a preview image.
     * @param Image is the preview
     */
    getTitle(preview: Image): string;
    /**
     * Method to get alt text for a preview image.
     * @param Image is the preview
     */
    getAlt(preview: Image): string;
    /**
     * Method used in the template to track ids in ngFor.
     * @param number index of the array
     * @param Image item of the array
     * @returns number the id of the item
     */
    trackById(index: number, item: Image): number;
    /**
     * Method used in template to sanitize an url when you need legacyIE11Mode.
     * In this way you can set an url as background of a div.
     * @param unsafeStyle is a string and represents the url to sanitize.
     * @returns a SafeStyle object that can be used in template without problems.
     */
    sanitizeUrlBgStyle(unsafeStyle: string): SafeStyle;
    /**
     * Method to get the background-size value when IE11LegacyMode is enabled.
     * This prevent weired behaviour on IE11 when previews are really small, but original images (.png/.jgp/...) are big.
     * Using 'cover' it's not enough, because it's causing empty background in some cases.
     * After some experiments, I decided to use the double of the height and auto as width.
     */
    getIE11LegacyBgSize(): string;
    /**
     * Method to cleanup resources. In fact, it cleans breakpointSubscription.
     * This is an Angular's lifecycle hook that is called when this component is destroyed.
     */
    ngOnDestroy(): void;
    /**
     * Private method to init previews based on the currentImage and the full array of images.
     * The current image in mandatory to show always the current preview (as highlighted).
     * @param InternalLibImage currentImage to decide how to show previews, because I always want to see the current image as highlighted
     * @param InternalLibImage[] images is the array of all images.
     */
    private initPreviews;
    /**
     * Private method to init both `start` and `end` to the beginning.
     */
    private setBeginningIndexesPreviews;
    /**
     * Private method to init both `start` and `end` to the end.
     */
    private setEndIndexesPreviews;
    /**
     * Private method to update the visible previews navigating to the right (next).
     */
    private next;
    /**
     * Private method to update the visible previews navigating to the left (previous).
     */
    private previous;
    /**
     * Private method to block/permit sliding between previews.
     * @param number boundaryIndex is the first or the last index of `images` input array
     * @returns boolean if true block sliding, otherwise not
     */
    private isPreventSliding;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CarouselPreviewsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CarouselPreviewsComponent, "ks-carousel-previews", never, { "carouselConfig": "carouselConfig"; "currentImage": "currentImage"; "images": "images"; "previewConfig": "previewConfig"; "accessibilityConfig": "accessibilityConfig"; }, { "clickPreview": "clickPreview"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtcHJldmlld3MuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhcm91c2VsLXByZXZpZXdzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztBQWFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVMQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBCcmVha3BvaW50T2JzZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvbGF5b3V0JztcbmltcG9ydCB7IEFjY2Vzc2libGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi9hY2Nlc3NpYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBY2Nlc3NpYmlsaXR5Q29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvYWNjZXNzaWJpbGl0eS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSW1hZ2UsIEltYWdlRXZlbnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9pbWFnZS5jbGFzcyc7XG5pbXBvcnQgeyBJbnRlcm5hbExpYkltYWdlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvaW1hZ2UtaW50ZXJuYWwuY2xhc3MnO1xuaW1wb3J0IHsgQ2Fyb3VzZWxQcmV2aWV3Q29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2Fyb3VzZWwtcHJldmlldy1jb25maWcuaW50ZXJmYWNlJztcbmltcG9ydCB7IENhcm91c2VsQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2Fyb3VzZWwtY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hY3Rpb24uZW51bSc7XG4vKipcbiAqIENvbXBvbmVudCB3aXRoIGltYWdlIHByZXZpZXdzIGZvciBjYXJvdXNlbFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDYXJvdXNlbFByZXZpZXdzQ29tcG9uZW50IGV4dGVuZHMgQWNjZXNzaWJsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcmVmO1xuICAgIHByaXZhdGUgYnJlYWtwb2ludE9ic2VydmVyO1xuICAgIHByaXZhdGUgc2FuaXRpemVyO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHRvIGNoYW5nZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBob3N0IGNvbXBvbmVudFxuICAgICAqL1xuICAgIGhvc3RNYXhXaWR0aDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFZhcmlhYmxlIHRvIHNldCBhcmlhLWxhYmVsIG9mIHRoZSBob3N0IGNvbXBvbmVudFxuICAgICAqL1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE9iamVjdCBvZiB0eXBlIGBDYXJvdXNlbENvbmZpZ2AgdG8gaW5pdCBDYXJvdXNlbENvbXBvbmVudCdzIGZlYXR1cmVzLlxuICAgICAqIEZvciBpbnN0YW5jZSwgaXQgY29udGFpbnMgcGFyYW1ldGVycyB0byBjaGFuZ2UgdGhlIHN0eWxlLCBob3cgaXQgbmF2aWdhdGVzIGFuZCBzbyBvbi5cbiAgICAgKi9cbiAgICBjYXJvdXNlbENvbmZpZzogQ2Fyb3VzZWxDb25maWc7XG4gICAgLyoqXG4gICAgICogT2JqZWN0IG9mIHR5cGUgYEludGVybmFsTGliSW1hZ2VgIHRoYXQgcmVwcmVzZW50IHRoZSB2aXNpYmxlIGltYWdlLlxuICAgICAqL1xuICAgIGN1cnJlbnRJbWFnZTogSW50ZXJuYWxMaWJJbWFnZTtcbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBgSW50ZXJuYWxMaWJJbWFnZWAgdGhhdCByZXByZXNlbnQgdGhlIG1vZGVsIG9mIHRoaXMgbGlicmFyeSB3aXRoIGFsbCBpbWFnZXMsXG4gICAgICogdGh1bWJzIGFuZCBzbyBvbi5cbiAgICAgKi9cbiAgICBpbWFnZXM6IEludGVybmFsTGliSW1hZ2VbXTtcbiAgICAvKipcbiAgICAgKiBPYmplY3Qgb2YgdHlwZSBgQ2Fyb3VzZWxQcmV2aWV3Q29uZmlnYCB0byBpbml0IFByZXZpZXdzQ29tcG9uZW50J3MgZmVhdHVyZXMuXG4gICAgICogRm9yIGluc3RhbmNlLCBpdCBjb250YWlucyBhIHBhcmFtIHRvIHNob3cvaGlkZSB0aGlzIGNvbXBvbmVudCwgc2l6ZXMuXG4gICAgICovXG4gICAgcHJldmlld0NvbmZpZzogQ2Fyb3VzZWxQcmV2aWV3Q29uZmlnO1xuICAgIC8qKlxuICAgICAqIE9iamVjdCBvZiB0eXBlIGBBY2Nlc3NpYmlsaXR5Q29uZmlnYCB0byBpbml0IGN1c3RvbSBhY2Nlc3NpYmlsaXR5IGZlYXR1cmVzLlxuICAgICAqIEZvciBpbnN0YW5jZSwgaXQgY29udGFpbnMgdGl0bGVzLCBhbHQgdGV4dHMsIGFyaWEtbGFiZWxzIGFuZCBzbyBvbi5cbiAgICAgKi9cbiAgICBhY2Nlc3NpYmlsaXR5Q29uZmlnOiBBY2Nlc3NpYmlsaXR5Q29uZmlnO1xuICAgIC8qKlxuICAgICAqIE91dHB1dCB0byBlbWl0IHRoZSBjbGlja2VkIHByZXZpZXcuIFRoZSBwYXlsb2FkIGNvbnRhaW5zIHRoZSBgSW50ZXJuYWxMaWJJbWFnZWAgYXNzb2NpYXRlZCB0byB0aGUgY2xpY2tlZCBwcmV2aWV3LlxuICAgICAqL1xuICAgIGNsaWNrUHJldmlldzogRXZlbnRFbWl0dGVyPEltYWdlRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEVudW0gb2YgdHlwZSBgQWN0aW9uYCB0aGF0IHJlcHJlc2VudHMgYSBtb3VzZSBjbGljayBvbiBhIGJ1dHRvbi5cbiAgICAgKiBEZWNsYXJlZCBoZXJlIHRvIGJlIHVzZWQgaW5zaWRlIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKi9cbiAgICBjbGlja0FjdGlvbjogQWN0aW9uO1xuICAgIC8qKlxuICAgICAqIEVudW0gb2YgdHlwZSBgQWN0aW9uYCB0aGF0IHJlcHJlc2VudHMgYSBrZXlib2FyZCBhY3Rpb24uXG4gICAgICogRGVjbGFyZWQgaGVyZSB0byBiZSB1c2VkIGluc2lkZSB0aGUgdGVtcGxhdGUuXG4gICAgICovXG4gICAga2V5Ym9hcmRBY3Rpb246IEFjdGlvbjtcbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBgSW50ZXJuYWxMaWJJbWFnZWAgZXhwb3NlZCB0byB0aGUgdGVtcGxhdGUuIFRoaXMgZmllbGQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgKiBhcHBseWluZyB0cmFuc2Zvcm1hdGlvbnMsIGRlZmF1bHQgdmFsdWVzIGFuZCBzbyBvbiB0byB0aGUgaW5wdXQgb2YgdGhlIHNhbWUgdHlwZS5cbiAgICAgKi9cbiAgICBwcmV2aWV3czogSW50ZXJuYWxMaWJJbWFnZVtdO1xuICAgIC8qKlxuICAgICAqIE9iamVjdCBvZiB0eXBlIGBDYXJvdXNlbFByZXZpZXdDb25maWdgIGV4cG9zZWQgdG8gdGhlIHRlbXBsYXRlLiBUaGlzIGZpZWxkIGlzIGluaXRpYWxpemVkXG4gICAgICogYXBwbHlpbmcgdHJhbnNmb3JtYXRpb25zLCBkZWZhdWx0IHZhbHVlcyBhbmQgc28gb24gdG8gdGhlIGlucHV0IG9mIHRoZSBzYW1lIHR5cGUuXG4gICAgICovXG4gICAgY29uZmlnUHJldmlldzogQ2Fyb3VzZWxQcmV2aWV3Q29uZmlnO1xuICAgIC8qKlxuICAgICAqIFN0YXJ0IGluZGV4IChpbmNsdXNpdmUpIG9mIHRoZSBpbnB1dCBpbWFnZXMgdXNlZCB0byBkaXNwbGF5IHByZXZpZXdzLlxuICAgICAqL1xuICAgIHN0YXJ0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogRW5kIGluZGV4IChub24gaW5jbHVzaXZlKSBvZiB0aGUgaW5wdXQgaW1hZ2VzIHVzZWQgdG8gZGlzcGxheSBwcmV2aWV3cy5cbiAgICAgKi9cbiAgICBlbmQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIHByb3BlcnR5IHdpdGggdGhlIGRlZmF1bHQgbWF4IGhlaWdodCBvZiBwcmV2aWV3cy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGRlZmF1bHRNYXhIZWlnaHQ7XG4gICAgcHJpdmF0ZSBicmVha3BvaW50U3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGJyZWFrcG9pbnRPYnNlcnZlcjogQnJlYWtwb2ludE9ic2VydmVyLCBzYW5pdGl6ZXI6IERvbVNhbml0aXplcik7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIHVwZGF0ZSB0aGUgaGVpZ2h0IG9mIHByZXZpZXdzLCBwYXNzaW5nIHRoZSBkZXNpcmVkIGhlaWdodCBhcyBpbnB1dC5cbiAgICAgKiBAcGFyYW0gY29uZmlnQnJlYWtwb2ludEhlaWdodCBpcyBhIG51bWJlciB0aGF0IHJlcHJlc2VudCB0aGUgZGVzaXJlZCBoZWlnaHQgdG8gc2V0LlxuICAgICAqL1xuICAgIHByaXZhdGUgdXBkYXRlSGVpZ2h0O1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCDCtG5nT25Jbml0wrQgdG8gYnVpbGQgYGNvbmZpZ1ByZXZpZXdgIGFwcGx5aW5nIGEgZGVmYXVsdCB2YWx1ZSBhbmQgYWxzbyB0b1xuICAgICAqIGluaXQgdGhlIGBwcmV2aWV3c2AgYXJyYXkuXG4gICAgICogVGhpcyBpcyBhbiBBbmd1bGFyJ3MgbGlmZWN5Y2xlIGhvb2ssIHNvIGl0cyBjYWxsZWQgYXV0b21hdGljYWxseSBieSBBbmd1bGFyIGl0c2VsZi5cbiAgICAgKiBJbiBwYXJ0aWN1bGFyLCBpdCdzIGNhbGxlZCBvbmx5IG9uZSB0aW1lISEhXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gY2hlY2sgaWYgYW4gaW1hZ2UgaXMgYWN0aXZlIChpLmUuIGEgcHJldmlldyBpbWFnZSkuXG4gICAgICogQHBhcmFtIEludGVybmFsTGliSW1hZ2UgcHJldmlldyBpcyBhbiBpbWFnZSB0byBjaGVjayBpZiBpdCdzIGFjdGl2ZSBvciBub3RcbiAgICAgKiBAcmV0dXJucyBib29sZWFuIHRydWUgaWYgaXMgYWN0aXZlLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc0FjdGl2ZShwcmV2aWV3OiBJbnRlcm5hbExpYkltYWdlKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgwrRuZ09uQ2hhbmdlc8K0IHRvIHVwZGF0ZSBgcHJldmlld3NgIGFycmF5LlxuICAgICAqIEFsc28sIGJvdGggYHN0YXJ0YCBhbmQgYGVuZGAgbG9jYWwgdmFyaWFibGVzIHdpbGwgYmUgdXBkYXRlZCBhY2NvcmRpbmdseS5cbiAgICAgKiBUaGlzIGlzIGFuIEFuZ3VsYXIncyBsaWZlY3ljbGUgaG9vaywgc28gaXRzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGJ5IEFuZ3VsYXIgaXRzZWxmLlxuICAgICAqIEluIHBhcnRpY3VsYXIsIGl0J3MgY2FsbGVkIHdoZW4gYW55IGRhdGEtYm91bmQgcHJvcGVydHkgb2YgYSBkaXJlY3RpdmUgY2hhbmdlcyEhIVxuICAgICAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBjYWxsZWQgYnkgZXZlbnRzIGZyb20gYm90aCBrZXlib2FyZCBhbmQgbW91c2Ugb24gYSBwcmV2aWV3LlxuICAgICAqIFRoaXMgd2lsbCB0cmlnZ2VyIHRoZSBgY2xpY2twcmV2aWV3YCBvdXRwdXQgd2l0aCB0aGUgaW5wdXQgcHJldmlldyBhcyBpdHMgcGF5bG9hZC5cbiAgICAgKiBAcGFyYW0gSW50ZXJuYWxMaWJJbWFnZSBwcmV2aWV3IHRoYXQgdHJpZ2dlcmVkIHRoaXMgbWV0aG9kXG4gICAgICogQHBhcmFtIEtleWJvYXJkRXZlbnQgfCBNb3VzZUV2ZW50IGV2ZW50IHBheWxvYWRcbiAgICAgKiBAcGFyYW0gQWN0aW9uIHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnQgKEFjdGlvbi5OT1JNQUwgYnkgZGVmYXVsdClcbiAgICAgKi9cbiAgICBvbkltYWdlRXZlbnQocHJldmlldzogSW50ZXJuYWxMaWJJbWFnZSwgZXZlbnQ6IEtleWJvYXJkRXZlbnQgfCBNb3VzZUV2ZW50LCBhY3Rpb24/OiBBY3Rpb24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCBjYWxsZWQgYnkgZXZlbnRzIGZyb20gYm90aCBrZXlib2FyZCBhbmQgbW91c2Ugb24gYSBuYXZpZ2F0aW9uIGFycm93LlxuICAgICAqIEBwYXJhbSBzdHJpbmcgZGlyZWN0aW9uIG9mIHRoZSBuYXZpZ2F0aW9uIHRoYXQgY2FuIGJlIGVpdGhlciAnbmV4dCcgb3IgJ3ByZXYnXG4gICAgICogQHBhcmFtIEtleWJvYXJkRXZlbnQgfCBNb3VzZUV2ZW50IGV2ZW50IHBheWxvYWRcbiAgICAgKi9cbiAgICBvbk5hdmlnYXRpb25FdmVudChkaXJlY3Rpb246IHN0cmluZywgZXZlbnQ6IEtleWJvYXJkRXZlbnQgfCBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gZ2V0IGFyaWEtbGFiZWwgdGV4dCBmb3IgYSBwcmV2aWV3IGltYWdlLlxuICAgICAqIEBwYXJhbSBJbWFnZSBpcyB0aGUgcHJldmlld1xuICAgICAqL1xuICAgIGdldEFyaWFMYWJlbChwcmV2aWV3OiBJbWFnZSk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gZ2V0IHRpdGxlIHRleHQgZm9yIGEgcHJldmlldyBpbWFnZS5cbiAgICAgKiBAcGFyYW0gSW1hZ2UgaXMgdGhlIHByZXZpZXdcbiAgICAgKi9cbiAgICBnZXRUaXRsZShwcmV2aWV3OiBJbWFnZSk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gZ2V0IGFsdCB0ZXh0IGZvciBhIHByZXZpZXcgaW1hZ2UuXG4gICAgICogQHBhcmFtIEltYWdlIGlzIHRoZSBwcmV2aWV3XG4gICAgICovXG4gICAgZ2V0QWx0KHByZXZpZXc6IEltYWdlKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIGluIHRoZSB0ZW1wbGF0ZSB0byB0cmFjayBpZHMgaW4gbmdGb3IuXG4gICAgICogQHBhcmFtIG51bWJlciBpbmRleCBvZiB0aGUgYXJyYXlcbiAgICAgKiBAcGFyYW0gSW1hZ2UgaXRlbSBvZiB0aGUgYXJyYXlcbiAgICAgKiBAcmV0dXJucyBudW1iZXIgdGhlIGlkIG9mIHRoZSBpdGVtXG4gICAgICovXG4gICAgdHJhY2tCeUlkKGluZGV4OiBudW1iZXIsIGl0ZW06IEltYWdlKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIGluIHRlbXBsYXRlIHRvIHNhbml0aXplIGFuIHVybCB3aGVuIHlvdSBuZWVkIGxlZ2FjeUlFMTFNb2RlLlxuICAgICAqIEluIHRoaXMgd2F5IHlvdSBjYW4gc2V0IGFuIHVybCBhcyBiYWNrZ3JvdW5kIG9mIGEgZGl2LlxuICAgICAqIEBwYXJhbSB1bnNhZmVTdHlsZSBpcyBhIHN0cmluZyBhbmQgcmVwcmVzZW50cyB0aGUgdXJsIHRvIHNhbml0aXplLlxuICAgICAqIEByZXR1cm5zIGEgU2FmZVN0eWxlIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGluIHRlbXBsYXRlIHdpdGhvdXQgcHJvYmxlbXMuXG4gICAgICovXG4gICAgc2FuaXRpemVVcmxCZ1N0eWxlKHVuc2FmZVN0eWxlOiBzdHJpbmcpOiBTYWZlU3R5bGU7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGdldCB0aGUgYmFja2dyb3VuZC1zaXplIHZhbHVlIHdoZW4gSUUxMUxlZ2FjeU1vZGUgaXMgZW5hYmxlZC5cbiAgICAgKiBUaGlzIHByZXZlbnQgd2VpcmVkIGJlaGF2aW91ciBvbiBJRTExIHdoZW4gcHJldmlld3MgYXJlIHJlYWxseSBzbWFsbCwgYnV0IG9yaWdpbmFsIGltYWdlcyAoLnBuZy8uamdwLy4uLikgYXJlIGJpZy5cbiAgICAgKiBVc2luZyAnY292ZXInIGl0J3Mgbm90IGVub3VnaCwgYmVjYXVzZSBpdCdzIGNhdXNpbmcgZW1wdHkgYmFja2dyb3VuZCBpbiBzb21lIGNhc2VzLlxuICAgICAqIEFmdGVyIHNvbWUgZXhwZXJpbWVudHMsIEkgZGVjaWRlZCB0byB1c2UgdGhlIGRvdWJsZSBvZiB0aGUgaGVpZ2h0IGFuZCBhdXRvIGFzIHdpZHRoLlxuICAgICAqL1xuICAgIGdldElFMTFMZWdhY3lCZ1NpemUoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBjbGVhbnVwIHJlc291cmNlcy4gSW4gZmFjdCwgaXQgY2xlYW5zIGJyZWFrcG9pbnRTdWJzY3JpcHRpb24uXG4gICAgICogVGhpcyBpcyBhbiBBbmd1bGFyJ3MgbGlmZWN5Y2xlIGhvb2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCB0byBpbml0IHByZXZpZXdzIGJhc2VkIG9uIHRoZSBjdXJyZW50SW1hZ2UgYW5kIHRoZSBmdWxsIGFycmF5IG9mIGltYWdlcy5cbiAgICAgKiBUaGUgY3VycmVudCBpbWFnZSBpbiBtYW5kYXRvcnkgdG8gc2hvdyBhbHdheXMgdGhlIGN1cnJlbnQgcHJldmlldyAoYXMgaGlnaGxpZ2h0ZWQpLlxuICAgICAqIEBwYXJhbSBJbnRlcm5hbExpYkltYWdlIGN1cnJlbnRJbWFnZSB0byBkZWNpZGUgaG93IHRvIHNob3cgcHJldmlld3MsIGJlY2F1c2UgSSBhbHdheXMgd2FudCB0byBzZWUgdGhlIGN1cnJlbnQgaW1hZ2UgYXMgaGlnaGxpZ2h0ZWRcbiAgICAgKiBAcGFyYW0gSW50ZXJuYWxMaWJJbWFnZVtdIGltYWdlcyBpcyB0aGUgYXJyYXkgb2YgYWxsIGltYWdlcy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRQcmV2aWV3cztcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCB0byBpbml0IGJvdGggYHN0YXJ0YCBhbmQgYGVuZGAgdG8gdGhlIGJlZ2lubmluZy5cbiAgICAgKi9cbiAgICBwcml2YXRlIHNldEJlZ2lubmluZ0luZGV4ZXNQcmV2aWV3cztcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCB0byBpbml0IGJvdGggYHN0YXJ0YCBhbmQgYGVuZGAgdG8gdGhlIGVuZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHNldEVuZEluZGV4ZXNQcmV2aWV3cztcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCB0byB1cGRhdGUgdGhlIHZpc2libGUgcHJldmlld3MgbmF2aWdhdGluZyB0byB0aGUgcmlnaHQgKG5leHQpLlxuICAgICAqL1xuICAgIHByaXZhdGUgbmV4dDtcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCB0byB1cGRhdGUgdGhlIHZpc2libGUgcHJldmlld3MgbmF2aWdhdGluZyB0byB0aGUgbGVmdCAocHJldmlvdXMpLlxuICAgICAqL1xuICAgIHByaXZhdGUgcHJldmlvdXM7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBtZXRob2QgdG8gYmxvY2svcGVybWl0IHNsaWRpbmcgYmV0d2VlbiBwcmV2aWV3cy5cbiAgICAgKiBAcGFyYW0gbnVtYmVyIGJvdW5kYXJ5SW5kZXggaXMgdGhlIGZpcnN0IG9yIHRoZSBsYXN0IGluZGV4IG9mIGBpbWFnZXNgIGlucHV0IGFycmF5XG4gICAgICogQHJldHVybnMgYm9vbGVhbiBpZiB0cnVlIGJsb2NrIHNsaWRpbmcsIG90aGVyd2lzZSBub3RcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzUHJldmVudFNsaWRpbmc7XG59XG4iXX0=