/// <reference types="mousetrap" />
import { InjectionToken } from '@angular/core';
import { KeyboardServiceConfig } from '../model/keyboard-service-config.interface';
import * as ɵngcc0 from '@angular/core';
export declare const KEYBOARD_CONFIGURATION: InjectionToken<KeyboardServiceConfig>;
/**
 * Service to intercept ctrl+s (or cmd+s on macOS) using a third-party library, called Mousetrap.
 */
export declare class KeyboardService {
    private config;
    /**
     * Private Mousetrap variable to store the instance.
     */
    private mousetrap;
    /**
     * Private variable to store shortcuts as either Array or string.
     */
    private shortcuts;
    /**
     * Constructor of `KeyboardService` to init `mousetrap` and `shortcuts` private variables.
     * @param KeyboardServiceConfig config object received by the `forRoot()` function to init custom shortcuts
     */
    constructor(config: KeyboardServiceConfig);
    /**
     * Method to add a lister for ctrl+s/cmd+s keyboard events.
     * @param (e: ExtendedKeyboardEvent, combo: string) => any onBind callback function to add shortcuts
     */
    add(onBind: (e: ExtendedKeyboardEvent, combo: string) => any): void;
    /**
     * Method to reset all listeners. Please, call this function when needed
     * to free resources ad prevent leaks.
     */
    reset(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<KeyboardService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<KeyboardService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJrZXlib2FyZC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwibW91c2V0cmFwXCIgLz5cbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBLZXlib2FyZFNlcnZpY2VDb25maWcgfSBmcm9tICcuLi9tb2RlbC9rZXlib2FyZC1zZXJ2aWNlLWNvbmZpZy5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgS0VZQk9BUkRfQ09ORklHVVJBVElPTjogSW5qZWN0aW9uVG9rZW48S2V5Ym9hcmRTZXJ2aWNlQ29uZmlnPjtcbi8qKlxuICogU2VydmljZSB0byBpbnRlcmNlcHQgY3RybCtzIChvciBjbWQrcyBvbiBtYWNPUykgdXNpbmcgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5LCBjYWxsZWQgTW91c2V0cmFwLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBLZXlib2FyZFNlcnZpY2Uge1xuICAgIHByaXZhdGUgY29uZmlnO1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgTW91c2V0cmFwIHZhcmlhYmxlIHRvIHN0b3JlIHRoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIG1vdXNldHJhcDtcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIHZhcmlhYmxlIHRvIHN0b3JlIHNob3J0Y3V0cyBhcyBlaXRoZXIgQXJyYXkgb3Igc3RyaW5nLlxuICAgICAqL1xuICAgIHByaXZhdGUgc2hvcnRjdXRzO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIG9mIGBLZXlib2FyZFNlcnZpY2VgIHRvIGluaXQgYG1vdXNldHJhcGAgYW5kIGBzaG9ydGN1dHNgIHByaXZhdGUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSBLZXlib2FyZFNlcnZpY2VDb25maWcgY29uZmlnIG9iamVjdCByZWNlaXZlZCBieSB0aGUgYGZvclJvb3QoKWAgZnVuY3Rpb24gdG8gaW5pdCBjdXN0b20gc2hvcnRjdXRzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBLZXlib2FyZFNlcnZpY2VDb25maWcpO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBhZGQgYSBsaXN0ZXIgZm9yIGN0cmwrcy9jbWQrcyBrZXlib2FyZCBldmVudHMuXG4gICAgICogQHBhcmFtIChlOiBFeHRlbmRlZEtleWJvYXJkRXZlbnQsIGNvbWJvOiBzdHJpbmcpID0+IGFueSBvbkJpbmQgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYWRkIHNob3J0Y3V0c1xuICAgICAqL1xuICAgIGFkZChvbkJpbmQ6IChlOiBFeHRlbmRlZEtleWJvYXJkRXZlbnQsIGNvbWJvOiBzdHJpbmcpID0+IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIHJlc2V0IGFsbCBsaXN0ZW5lcnMuIFBsZWFzZSwgY2FsbCB0aGlzIGZ1bmN0aW9uIHdoZW4gbmVlZGVkXG4gICAgICogdG8gZnJlZSByZXNvdXJjZXMgYWQgcHJldmVudCBsZWFrcy5cbiAgICAgKi9cbiAgICByZXNldCgpOiB2b2lkO1xufVxuIl19