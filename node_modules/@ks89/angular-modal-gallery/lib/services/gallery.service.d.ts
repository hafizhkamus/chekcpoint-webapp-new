import { EventEmitter } from '@angular/core';
import { Image } from '../model/image.class';
import * as ɵngcc0 from '@angular/core';
export interface InternalGalleryPayload {
    galleryId: number;
    index?: number;
    image?: Image;
    result?: boolean;
}
/**
 * Service to call methods on a gallery by its galleryId.
 */
export declare class GalleryService {
    navigate: EventEmitter<InternalGalleryPayload>;
    close: EventEmitter<number>;
    update: EventEmitter<InternalGalleryPayload>;
    autoPlay: EventEmitter<InternalGalleryPayload>;
    /**
     * Method to open the modal gallery with the galleryId passed as parameter.
     * It will automatically shows the image at position index.
     * @param galleryId number or undefined that represents the unique id of the gallery.
     * @param index number of the image that you want to open.
     * @throws a error with a message if galleryId is either undefined, < 0 or index is < 0
     */
    openGallery(galleryId: number | undefined, index: number): void;
    /**
     * Method to navigate to a specific index of the modal gallery with the galleryId passed as parameter.
     * At the moment, it's like openGallery, but in upcoming releases it will change the behaviour.
     * @param galleryId number or undefined that represents the unique id of the gallery.
     * @param index number of the image that you want to open.
     * @throws a error with a message if galleryId is either undefined, < 0 or index is < 0
     */
    navigateGallery(galleryId: number | undefined, index: number): void;
    /**
     * Method to close the modal gallery with the galleryId passed as parameter.
     * @param galleryId number or undefined that represents the unique id of the gallery.
     * @throws a error with a message if galleryId is either undefined or < 0
     */
    closeGallery(galleryId: number | undefined): void;
    /**
     * Service to update an image with a new object
     * @param galleryId number or undefined that represents the unique id of the gallery.
     * @param index number of the image that you want to update.
     * @throws a error with a message if galleryId is either undefined, < 0 or index is < 0
     *
     * @since 6.3.0
     */
    updateGallery(galleryId: number | undefined, index: number, image: Image): void;
    /**
     * Service to play modal-gallery
     * @param galleryId number or undefined that represents the unique id of the gallery.
     * @throws a error with a message if galleryId is either undefined or < 0
     *
     * @since 7.2.0
     */
    play(galleryId: number | undefined): void;
    /**
     * Service to stop modal-gallery
     * @param galleryId number or undefined that represents the unique id of the gallery.
     * @throws a error with a message if galleryId is either undefined or < 0
     *
     * @since 7.2.0
     */
    stop(galleryId: number | undefined): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GalleryService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GalleryService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImdhbGxlcnkuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkRBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uL21vZGVsL2ltYWdlLmNsYXNzJztcbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJuYWxHYWxsZXJ5UGF5bG9hZCB7XG4gICAgZ2FsbGVyeUlkOiBudW1iZXI7XG4gICAgaW5kZXg/OiBudW1iZXI7XG4gICAgaW1hZ2U/OiBJbWFnZTtcbiAgICByZXN1bHQ/OiBib29sZWFuO1xufVxuLyoqXG4gKiBTZXJ2aWNlIHRvIGNhbGwgbWV0aG9kcyBvbiBhIGdhbGxlcnkgYnkgaXRzIGdhbGxlcnlJZC5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR2FsbGVyeVNlcnZpY2Uge1xuICAgIG5hdmlnYXRlOiBFdmVudEVtaXR0ZXI8SW50ZXJuYWxHYWxsZXJ5UGF5bG9hZD47XG4gICAgY2xvc2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHVwZGF0ZTogRXZlbnRFbWl0dGVyPEludGVybmFsR2FsbGVyeVBheWxvYWQ+O1xuICAgIGF1dG9QbGF5OiBFdmVudEVtaXR0ZXI8SW50ZXJuYWxHYWxsZXJ5UGF5bG9hZD47XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIG9wZW4gdGhlIG1vZGFsIGdhbGxlcnkgd2l0aCB0aGUgZ2FsbGVyeUlkIHBhc3NlZCBhcyBwYXJhbWV0ZXIuXG4gICAgICogSXQgd2lsbCBhdXRvbWF0aWNhbGx5IHNob3dzIHRoZSBpbWFnZSBhdCBwb3NpdGlvbiBpbmRleC5cbiAgICAgKiBAcGFyYW0gZ2FsbGVyeUlkIG51bWJlciBvciB1bmRlZmluZWQgdGhhdCByZXByZXNlbnRzIHRoZSB1bmlxdWUgaWQgb2YgdGhlIGdhbGxlcnkuXG4gICAgICogQHBhcmFtIGluZGV4IG51bWJlciBvZiB0aGUgaW1hZ2UgdGhhdCB5b3Ugd2FudCB0byBvcGVuLlxuICAgICAqIEB0aHJvd3MgYSBlcnJvciB3aXRoIGEgbWVzc2FnZSBpZiBnYWxsZXJ5SWQgaXMgZWl0aGVyIHVuZGVmaW5lZCwgPCAwIG9yIGluZGV4IGlzIDwgMFxuICAgICAqL1xuICAgIG9wZW5HYWxsZXJ5KGdhbGxlcnlJZDogbnVtYmVyIHwgdW5kZWZpbmVkLCBpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gbmF2aWdhdGUgdG8gYSBzcGVjaWZpYyBpbmRleCBvZiB0aGUgbW9kYWwgZ2FsbGVyeSB3aXRoIHRoZSBnYWxsZXJ5SWQgcGFzc2VkIGFzIHBhcmFtZXRlci5cbiAgICAgKiBBdCB0aGUgbW9tZW50LCBpdCdzIGxpa2Ugb3BlbkdhbGxlcnksIGJ1dCBpbiB1cGNvbWluZyByZWxlYXNlcyBpdCB3aWxsIGNoYW5nZSB0aGUgYmVoYXZpb3VyLlxuICAgICAqIEBwYXJhbSBnYWxsZXJ5SWQgbnVtYmVyIG9yIHVuZGVmaW5lZCB0aGF0IHJlcHJlc2VudHMgdGhlIHVuaXF1ZSBpZCBvZiB0aGUgZ2FsbGVyeS5cbiAgICAgKiBAcGFyYW0gaW5kZXggbnVtYmVyIG9mIHRoZSBpbWFnZSB0aGF0IHlvdSB3YW50IHRvIG9wZW4uXG4gICAgICogQHRocm93cyBhIGVycm9yIHdpdGggYSBtZXNzYWdlIGlmIGdhbGxlcnlJZCBpcyBlaXRoZXIgdW5kZWZpbmVkLCA8IDAgb3IgaW5kZXggaXMgPCAwXG4gICAgICovXG4gICAgbmF2aWdhdGVHYWxsZXJ5KGdhbGxlcnlJZDogbnVtYmVyIHwgdW5kZWZpbmVkLCBpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gY2xvc2UgdGhlIG1vZGFsIGdhbGxlcnkgd2l0aCB0aGUgZ2FsbGVyeUlkIHBhc3NlZCBhcyBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIGdhbGxlcnlJZCBudW1iZXIgb3IgdW5kZWZpbmVkIHRoYXQgcmVwcmVzZW50cyB0aGUgdW5pcXVlIGlkIG9mIHRoZSBnYWxsZXJ5LlxuICAgICAqIEB0aHJvd3MgYSBlcnJvciB3aXRoIGEgbWVzc2FnZSBpZiBnYWxsZXJ5SWQgaXMgZWl0aGVyIHVuZGVmaW5lZCBvciA8IDBcbiAgICAgKi9cbiAgICBjbG9zZUdhbGxlcnkoZ2FsbGVyeUlkOiBudW1iZXIgfCB1bmRlZmluZWQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNlcnZpY2UgdG8gdXBkYXRlIGFuIGltYWdlIHdpdGggYSBuZXcgb2JqZWN0XG4gICAgICogQHBhcmFtIGdhbGxlcnlJZCBudW1iZXIgb3IgdW5kZWZpbmVkIHRoYXQgcmVwcmVzZW50cyB0aGUgdW5pcXVlIGlkIG9mIHRoZSBnYWxsZXJ5LlxuICAgICAqIEBwYXJhbSBpbmRleCBudW1iZXIgb2YgdGhlIGltYWdlIHRoYXQgeW91IHdhbnQgdG8gdXBkYXRlLlxuICAgICAqIEB0aHJvd3MgYSBlcnJvciB3aXRoIGEgbWVzc2FnZSBpZiBnYWxsZXJ5SWQgaXMgZWl0aGVyIHVuZGVmaW5lZCwgPCAwIG9yIGluZGV4IGlzIDwgMFxuICAgICAqXG4gICAgICogQHNpbmNlIDYuMy4wXG4gICAgICovXG4gICAgdXBkYXRlR2FsbGVyeShnYWxsZXJ5SWQ6IG51bWJlciB8IHVuZGVmaW5lZCwgaW5kZXg6IG51bWJlciwgaW1hZ2U6IEltYWdlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXJ2aWNlIHRvIHBsYXkgbW9kYWwtZ2FsbGVyeVxuICAgICAqIEBwYXJhbSBnYWxsZXJ5SWQgbnVtYmVyIG9yIHVuZGVmaW5lZCB0aGF0IHJlcHJlc2VudHMgdGhlIHVuaXF1ZSBpZCBvZiB0aGUgZ2FsbGVyeS5cbiAgICAgKiBAdGhyb3dzIGEgZXJyb3Igd2l0aCBhIG1lc3NhZ2UgaWYgZ2FsbGVyeUlkIGlzIGVpdGhlciB1bmRlZmluZWQgb3IgPCAwXG4gICAgICpcbiAgICAgKiBAc2luY2UgNy4yLjBcbiAgICAgKi9cbiAgICBwbGF5KGdhbGxlcnlJZDogbnVtYmVyIHwgdW5kZWZpbmVkKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXJ2aWNlIHRvIHN0b3AgbW9kYWwtZ2FsbGVyeVxuICAgICAqIEBwYXJhbSBnYWxsZXJ5SWQgbnVtYmVyIG9yIHVuZGVmaW5lZCB0aGF0IHJlcHJlc2VudHMgdGhlIHVuaXF1ZSBpZCBvZiB0aGUgZ2FsbGVyeS5cbiAgICAgKiBAdGhyb3dzIGEgZXJyb3Igd2l0aCBhIG1lc3NhZ2UgaWYgZ2FsbGVyeUlkIGlzIGVpdGhlciB1bmRlZmluZWQgb3IgPCAwXG4gICAgICpcbiAgICAgKiBAc2luY2UgNy4yLjBcbiAgICAgKi9cbiAgICBzdG9wKGdhbGxlcnlJZDogbnVtYmVyIHwgdW5kZWZpbmVkKTogdm9pZDtcbn1cbiJdfQ==