import { ElementRef, OnChanges, OnInit, Renderer2 } from '@angular/core';
import { MaxSize } from '../model/max-size.interface';
/**
 * Directive to change the max size of an element.
 */
import * as ɵngcc0 from '@angular/core';
export declare class MaxSizeDirective implements OnInit, OnChanges {
    private renderer;
    private el;
    /**
     * Object of type `MaxSize` to resize the element.
     */
    sizeConfig: MaxSize;
    constructor(renderer: Renderer2, el: ElementRef);
    /**
     * Method ´ngOnInit´ to apply the style of this directive.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit(): void;
    /**
     * Method ´ngOnChanges´ to apply the style of this directive.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called when any data-bound property of a directive changes!!!
     */
    ngOnChanges(): void;
    /**
     * Private method to change both max-width and max-height of an element.
     */
    private applyStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MaxSizeDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MaxSizeDirective, "[ksMaxSize]", never, { "sizeConfig": "sizeConfig"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LXNpemUuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm1heC1zaXplLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXhTaXplIH0gZnJvbSAnLi4vbW9kZWwvbWF4LXNpemUuaW50ZXJmYWNlJztcbi8qKlxuICogRGlyZWN0aXZlIHRvIGNoYW5nZSB0aGUgbWF4IHNpemUgb2YgYW4gZWxlbWVudC5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWF4U2l6ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWw7XG4gICAgLyoqXG4gICAgICogT2JqZWN0IG9mIHR5cGUgYE1heFNpemVgIHRvIHJlc2l6ZSB0aGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICBzaXplQ29uZmlnOiBNYXhTaXplO1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsOiBFbGVtZW50UmVmKTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgwrRuZ09uSW5pdMK0IHRvIGFwcGx5IHRoZSBzdHlsZSBvZiB0aGlzIGRpcmVjdGl2ZS5cbiAgICAgKiBUaGlzIGlzIGFuIEFuZ3VsYXIncyBsaWZlY3ljbGUgaG9vaywgc28gaXRzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGJ5IEFuZ3VsYXIgaXRzZWxmLlxuICAgICAqIEluIHBhcnRpY3VsYXIsIGl0J3MgY2FsbGVkIG9ubHkgb25lIHRpbWUhISFcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCDCtG5nT25DaGFuZ2VzwrQgdG8gYXBwbHkgdGhlIHN0eWxlIG9mIHRoaXMgZGlyZWN0aXZlLlxuICAgICAqIFRoaXMgaXMgYW4gQW5ndWxhcidzIGxpZmVjeWNsZSBob29rLCBzbyBpdHMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgYnkgQW5ndWxhciBpdHNlbGYuXG4gICAgICogSW4gcGFydGljdWxhciwgaXQncyBjYWxsZWQgd2hlbiBhbnkgZGF0YS1ib3VuZCBwcm9wZXJ0eSBvZiBhIGRpcmVjdGl2ZSBjaGFuZ2VzISEhXG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCB0byBjaGFuZ2UgYm90aCBtYXgtd2lkdGggYW5kIG1heC1oZWlnaHQgb2YgYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGFwcGx5U3R5bGU7XG59XG4iXX0=