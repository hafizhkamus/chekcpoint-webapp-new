import { ElementRef, OnChanges, OnInit, Renderer2 } from '@angular/core';
/**
 * Directive to change the flex-wrap css property of an element.
 */
import * as ɵngcc0 from '@angular/core';
export declare class WrapDirective implements OnInit, OnChanges {
    private renderer;
    private el;
    /**
     * Boolean input that it's true to add 'flex-wrap: wrap', 'flex-wrap: nowrap' otherwise.
     */
    wrap: boolean;
    /**
     * String input to force the width of the element to be able to see wrapping.
     */
    width: string;
    constructor(renderer: Renderer2, el: ElementRef);
    /**
     * Method ´ngOnInit´ to apply the style of this directive.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit(): void;
    /**
     * Method ´ngOnChanges´ to apply the style of this directive.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called when any data-bound property of a directive changes!!!
     */
    ngOnChanges(): void;
    /**
     * Private method to change both widht and flex-wrap css properties.
     */
    private applyStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<WrapDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<WrapDirective, "[ksWrap]", never, { "wrap": "wrap"; "width": "width"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsid3JhcC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBEaXJlY3RpdmUgdG8gY2hhbmdlIHRoZSBmbGV4LXdyYXAgY3NzIHByb3BlcnR5IG9mIGFuIGVsZW1lbnQuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFdyYXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGVsO1xuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gaW5wdXQgdGhhdCBpdCdzIHRydWUgdG8gYWRkICdmbGV4LXdyYXA6IHdyYXAnLCAnZmxleC13cmFwOiBub3dyYXAnIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICB3cmFwOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFN0cmluZyBpbnB1dCB0byBmb3JjZSB0aGUgd2lkdGggb2YgdGhlIGVsZW1lbnQgdG8gYmUgYWJsZSB0byBzZWUgd3JhcHBpbmcuXG4gICAgICovXG4gICAgd2lkdGg6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZik7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIMK0bmdPbkluaXTCtCB0byBhcHBseSB0aGUgc3R5bGUgb2YgdGhpcyBkaXJlY3RpdmUuXG4gICAgICogVGhpcyBpcyBhbiBBbmd1bGFyJ3MgbGlmZWN5Y2xlIGhvb2ssIHNvIGl0cyBjYWxsZWQgYXV0b21hdGljYWxseSBieSBBbmd1bGFyIGl0c2VsZi5cbiAgICAgKiBJbiBwYXJ0aWN1bGFyLCBpdCdzIGNhbGxlZCBvbmx5IG9uZSB0aW1lISEhXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgwrRuZ09uQ2hhbmdlc8K0IHRvIGFwcGx5IHRoZSBzdHlsZSBvZiB0aGlzIGRpcmVjdGl2ZS5cbiAgICAgKiBUaGlzIGlzIGFuIEFuZ3VsYXIncyBsaWZlY3ljbGUgaG9vaywgc28gaXRzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGJ5IEFuZ3VsYXIgaXRzZWxmLlxuICAgICAqIEluIHBhcnRpY3VsYXIsIGl0J3MgY2FsbGVkIHdoZW4gYW55IGRhdGEtYm91bmQgcHJvcGVydHkgb2YgYSBkaXJlY3RpdmUgY2hhbmdlcyEhIVxuICAgICAqL1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBtZXRob2QgdG8gY2hhbmdlIGJvdGggd2lkaHQgYW5kIGZsZXgtd3JhcCBjc3MgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGFwcGx5U3R5bGU7XG59XG4iXX0=