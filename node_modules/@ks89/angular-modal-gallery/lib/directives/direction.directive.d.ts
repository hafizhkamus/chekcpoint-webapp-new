import { ElementRef, OnChanges, OnInit, Renderer2 } from '@angular/core';
/**
 * Directive to change the flex-direction of an element, based on two inputs (`direction` and `justify`).
 */
import * as ɵngcc0 from '@angular/core';
export declare class DirectionDirective implements OnInit, OnChanges {
    private renderer;
    private el;
    /**
     * String input to set the css flex-direction of an element.
     */
    direction: string;
    /**
     * String input to set the css justify-content of an element.
     */
    justify: string;
    constructor(renderer: Renderer2, el: ElementRef);
    /**
     * Method ´ngOnInit´ to apply the style of this directive.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit(): void;
    /**
     * Method ´ngOnChanges´ to apply the style of this directive.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called when any data-bound property of a directive changes!!!
     */
    ngOnChanges(): void;
    /**
     * Private method to change both direction and justify of an element.
     */
    private applyStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DirectionDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DirectionDirective, "[ksDirection]", never, { "direction": "direction"; "justify": "justify"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkaXJlY3Rpb24uZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogRGlyZWN0aXZlIHRvIGNoYW5nZSB0aGUgZmxleC1kaXJlY3Rpb24gb2YgYW4gZWxlbWVudCwgYmFzZWQgb24gdHdvIGlucHV0cyAoYGRpcmVjdGlvbmAgYW5kIGBqdXN0aWZ5YCkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERpcmVjdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWw7XG4gICAgLyoqXG4gICAgICogU3RyaW5nIGlucHV0IHRvIHNldCB0aGUgY3NzIGZsZXgtZGlyZWN0aW9uIG9mIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgZGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3RyaW5nIGlucHV0IHRvIHNldCB0aGUgY3NzIGp1c3RpZnktY29udGVudCBvZiBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGp1c3RpZnk6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZik7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIMK0bmdPbkluaXTCtCB0byBhcHBseSB0aGUgc3R5bGUgb2YgdGhpcyBkaXJlY3RpdmUuXG4gICAgICogVGhpcyBpcyBhbiBBbmd1bGFyJ3MgbGlmZWN5Y2xlIGhvb2ssIHNvIGl0cyBjYWxsZWQgYXV0b21hdGljYWxseSBieSBBbmd1bGFyIGl0c2VsZi5cbiAgICAgKiBJbiBwYXJ0aWN1bGFyLCBpdCdzIGNhbGxlZCBvbmx5IG9uZSB0aW1lISEhXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgwrRuZ09uQ2hhbmdlc8K0IHRvIGFwcGx5IHRoZSBzdHlsZSBvZiB0aGlzIGRpcmVjdGl2ZS5cbiAgICAgKiBUaGlzIGlzIGFuIEFuZ3VsYXIncyBsaWZlY3ljbGUgaG9vaywgc28gaXRzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGJ5IEFuZ3VsYXIgaXRzZWxmLlxuICAgICAqIEluIHBhcnRpY3VsYXIsIGl0J3MgY2FsbGVkIHdoZW4gYW55IGRhdGEtYm91bmQgcHJvcGVydHkgb2YgYSBkaXJlY3RpdmUgY2hhbmdlcyEhIVxuICAgICAqL1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBtZXRob2QgdG8gY2hhbmdlIGJvdGggZGlyZWN0aW9uIGFuZCBqdXN0aWZ5IG9mIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBhcHBseVN0eWxlO1xufVxuIl19