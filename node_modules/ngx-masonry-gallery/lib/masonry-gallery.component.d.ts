import { AfterViewInit, EventEmitter, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { IMasonryGalleryImage } from './masonry-gallery-models';
import * as ɵngcc0 from '@angular/core';
export declare class MasonryGalleryComponent implements AfterViewInit, OnDestroy, OnChanges {
    private renderer;
    images: IMasonryGalleryImage[];
    width: number;
    gutter: number;
    verticalGutter: number;
    imageClasses: string[];
    clickImage: EventEmitter<IMasonryGalleryImage>;
    removeComplete: EventEmitter<any[]>;
    layoutComplete: EventEmitter<any[]>;
    readonly galleryGuid: string;
    private readonly mansonryItemSelectorClass;
    private readonly activeImages;
    private msnry?;
    private grid?;
    private changesToProcess?;
    private viewReady;
    constructor(renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    handleClick(image: IMasonryGalleryImage): void;
    ngAfterViewInit(): void;
    addImages(images: IMasonryGalleryImage[]): void;
    removeImages(images: IMasonryGalleryImage[]): void;
    private processImages;
    private getAddedAndRemovesImages;
    private initMasonry;
    private removeImageFromGallery;
    private addImagesToGallery;
    private getImageClass;
    private getImageId;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MasonryGalleryComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MasonryGalleryComponent, "ngx-masonry-gallery", never, { "images": "images"; "width": "width"; "gutter": "gutter"; "verticalGutter": "verticalGutter"; "imageClasses": "imageClasses"; }, { "clickImage": "clickImage"; "removeComplete": "removeComplete"; "layoutComplete": "layoutComplete"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzb25yeS1nYWxsZXJ5LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtYXNvbnJ5LWdhbGxlcnkuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSU1hc29ucnlHYWxsZXJ5SW1hZ2UgfSBmcm9tICcuL21hc29ucnktZ2FsbGVyeS1tb2RlbHMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXNvbnJ5R2FsbGVyeUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcclxuICAgIHByaXZhdGUgcmVuZGVyZXI7XHJcbiAgICBpbWFnZXM6IElNYXNvbnJ5R2FsbGVyeUltYWdlW107XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgZ3V0dGVyOiBudW1iZXI7XHJcbiAgICB2ZXJ0aWNhbEd1dHRlcjogbnVtYmVyO1xyXG4gICAgaW1hZ2VDbGFzc2VzOiBzdHJpbmdbXTtcclxuICAgIGNsaWNrSW1hZ2U6IEV2ZW50RW1pdHRlcjxJTWFzb25yeUdhbGxlcnlJbWFnZT47XHJcbiAgICByZW1vdmVDb21wbGV0ZTogRXZlbnRFbWl0dGVyPGFueVtdPjtcclxuICAgIGxheW91dENvbXBsZXRlOiBFdmVudEVtaXR0ZXI8YW55W10+O1xyXG4gICAgcmVhZG9ubHkgZ2FsbGVyeUd1aWQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbWFuc29ucnlJdGVtU2VsZWN0b3JDbGFzcztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgYWN0aXZlSW1hZ2VzO1xyXG4gICAgcHJpdmF0ZSBtc25yeT87XHJcbiAgICBwcml2YXRlIGdyaWQ/O1xyXG4gICAgcHJpdmF0ZSBjaGFuZ2VzVG9Qcm9jZXNzPztcclxuICAgIHByaXZhdGUgdmlld1JlYWR5O1xyXG4gICAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMik7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBoYW5kbGVDbGljayhpbWFnZTogSU1hc29ucnlHYWxsZXJ5SW1hZ2UpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBhZGRJbWFnZXMoaW1hZ2VzOiBJTWFzb25yeUdhbGxlcnlJbWFnZVtdKTogdm9pZDtcclxuICAgIHJlbW92ZUltYWdlcyhpbWFnZXM6IElNYXNvbnJ5R2FsbGVyeUltYWdlW10pOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBwcm9jZXNzSW1hZ2VzO1xyXG4gICAgcHJpdmF0ZSBnZXRBZGRlZEFuZFJlbW92ZXNJbWFnZXM7XHJcbiAgICBwcml2YXRlIGluaXRNYXNvbnJ5O1xyXG4gICAgcHJpdmF0ZSByZW1vdmVJbWFnZUZyb21HYWxsZXJ5O1xyXG4gICAgcHJpdmF0ZSBhZGRJbWFnZXNUb0dhbGxlcnk7XHJcbiAgICBwcml2YXRlIGdldEltYWdlQ2xhc3M7XHJcbiAgICBwcml2YXRlIGdldEltYWdlSWQ7XHJcbn1cclxuIl19